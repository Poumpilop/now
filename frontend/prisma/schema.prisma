// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String    @unique
  email        String?
  passwordHash String?   @unique
  avatarUrl    String?
  bio          String?
  location     String?
  sessions     Session[]
  posts        Post[]
  isAdmin      Boolean   @default(false)
  isCertified  Boolean   @default(false)
  likes        Like[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  reportsSubmitted Report[] @relation("UserReports")
  reportsReceived  Report[] @relation("ReportedUsers")


  createdAt DateTime @default(now())

  @@map("users")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes   Like[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Report {
  id          String   @id @default(cuid())
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  reporterId  String
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedId  String
  reported    User     @relation("ReportedUsers", fields: [reportedId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("reports")
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}